/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export type LogStruct = {
  index: BigNumberish;
  timestamp: BigNumberish;
  txHash: BytesLike;
  blockNumber: BigNumberish;
  blockHash: BytesLike;
  source: AddressLike;
  topics: BytesLike[];
  data: BytesLike;
};

export type LogStructOutput = [
  index: bigint,
  timestamp: bigint,
  txHash: string,
  blockNumber: bigint,
  blockHash: string,
  source: string,
  topics: string[],
  data: string
] & {
  index: bigint;
  timestamp: bigint;
  txHash: string;
  blockNumber: bigint;
  blockHash: string;
  source: string;
  topics: string[];
  data: string;
};

export interface ILogAutomationInterface extends Interface {
  getFunction(nameOrSignature: "checkLog" | "performUpkeep"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkLog",
    values: [LogStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "checkLog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
}

export interface ILogAutomation extends BaseContract {
  connect(runner?: ContractRunner | null): ILogAutomation;
  waitForDeployment(): Promise<this>;

  interface: ILogAutomationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkLog: TypedContractMethod<
    [log: LogStruct, checkData: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "nonpayable"
  >;

  performUpkeep: TypedContractMethod<
    [performData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkLog"
  ): TypedContractMethod<
    [log: LogStruct, checkData: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[performData: BytesLike], [void], "nonpayable">;

  filters: {};
}
