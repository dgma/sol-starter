/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IVerifierProxy,
  IVerifierProxyInterface,
} from "../../../contracts/interfaces/IVerifierProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "parameterPayload",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bytes",
        name: "verifierResponse",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "payloads",
        type: "bytes[]",
      },
      {
        internalType: "bytes",
        name: "parameterPayload",
        type: "bytes",
      },
    ],
    name: "verifyBulk",
    outputs: [
      {
        internalType: "bytes[]",
        name: "verifiedReports",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

export class IVerifierProxy__factory {
  static readonly abi = _abi;
  static createInterface(): IVerifierProxyInterface {
    return new Interface(_abi) as IVerifierProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IVerifierProxy {
    return new Contract(address, _abi, runner) as unknown as IVerifierProxy;
  }
}
