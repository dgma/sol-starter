/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  StreamsLookupCompatibleInterface,
  StreamsLookupCompatibleInterfaceInterface,
} from "../../../../../../../@chainlink/contracts/src/v0.8/automation/interfaces/StreamsLookupCompatibleInterface";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "feedParamKey",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "feeds",
        type: "string[]",
      },
      {
        internalType: "string",
        name: "timeParamKey",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "StreamsLookup",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "values",
        type: "bytes[]",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "checkCallback",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class StreamsLookupCompatibleInterface__factory {
  static readonly abi = _abi;
  static createInterface(): StreamsLookupCompatibleInterfaceInterface {
    return new Interface(_abi) as StreamsLookupCompatibleInterfaceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): StreamsLookupCompatibleInterface {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as StreamsLookupCompatibleInterface;
  }
}
