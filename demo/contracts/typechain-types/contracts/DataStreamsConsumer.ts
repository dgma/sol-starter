/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ForwardDataStruct = {
  price: BigNumberish;
  feedType: BigNumberish;
  forwardArguments: BytesLike;
};

export type ForwardDataStructOutput = [
  price: bigint,
  feedType: bigint,
  forwardArguments: string
] & { price: bigint; feedType: bigint; forwardArguments: string };

export interface DataStreamsConsumerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE"
      | "consume"
      | "i_oracleEmitter"
      | "i_router"
      | "initializer"
      | "trade"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TradeExecuted"): EventFragment;

  encodeFunctionData(functionFragment: "FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "consume",
    values: [ForwardDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "i_oracleEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "i_router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [AddressLike, AddressLike, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "consume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "i_oracleEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "i_router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [tokensAmount: BigNumberish];
  export type OutputTuple = [tokensAmount: bigint];
  export interface OutputObject {
    tokensAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataStreamsConsumer extends BaseContract {
  connect(runner?: ContractRunner | null): DataStreamsConsumer;
  waitForDeployment(): Promise<this>;

  interface: DataStreamsConsumerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE: TypedContractMethod<[], [bigint], "view">;

  consume: TypedContractMethod<
    [forwardData: ForwardDataStruct],
    [boolean],
    "nonpayable"
  >;

  i_oracleEmitter: TypedContractMethod<[], [string], "view">;

  i_router: TypedContractMethod<[], [string], "view">;

  initializer: TypedContractMethod<
    [router: AddressLike, oracleEmitter: AddressLike],
    [void],
    "nonpayable"
  >;

  trade: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amount: BigNumberish,
      feedId: string,
      nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "consume"
  ): TypedContractMethod<
    [forwardData: ForwardDataStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "i_oracleEmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "i_router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initializer"
  ): TypedContractMethod<
    [router: AddressLike, oracleEmitter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trade"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amount: BigNumberish,
      feedId: string,
      nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;

  filters: {
    "TradeExecuted(uint256)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
  };
}
